kind: pipeline
type: docker
name: default

services:
- name: grpc-service
  image: kameshsampath/go-run
  pull: always
  environment:
    GO_WORKSPACE: /drone/src
    GO_RUN_FILE: ./cmd/server/main.go

steps:
- name: test
  image: golang:1.19
  commands:
    # TODO move to earlier step which can check if grpc service is reachable
    - sleep 30
    - go test -v ./...

- name: protoc-server
  image: kameshsampath/protoc-go
  pull: if-not-exists
  commands:
  - |
    protoc --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
    ./protos/greeter.proto

- name: protoc-web
  image: kameshsampath/protoc-grpc-web
  pull: if-not-exists
  commands:
  - |
    protoc -I=./protos greeter.proto \
      --js_out=import_style=commonjs:./client/web \
      --grpc-web_out=import_style=commonjs,mode=grpcwebtext:./client/web
 
## Build Server binary
- name: build server
  image: golang:1.19
  pull: if-not-exists
  commands:
    - rm -rf ./cmd/server/server
    - go build -o ./cmd/server/server ./cmd/server/main.go

## Build Server image
- name: build server image
  image: plugins/docker
  pull: if-not-exists
  settings:
    context: ./cmd/server
    insecure: true
    purge: false
    dry_run: true
    dockerfile: ./cmd/server/Dockerfile
    repo: kameshsampath/lingua-greeter-server
  volumes:
    - name: docker-sock
      path: /var/run/docker.sock


volumes:
  - name: docker-sock
    host:
      path: /var/run/docker.sock
